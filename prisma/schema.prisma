// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                    String     @id @default(uuid())
  name                  String
  email                 String?    @unique
  emailVerified         DateTime?   @map("email_verified")
  image                 String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  accounts              Account[]
  sessions              Session[]
  @@map("users")
}
model Account {
  id                 String    @id @default(cuid())
  userId              String    @map("user_id")
  type                 String?
  provider           String
  providerAccountId  String    @map("provider_account_id")
  token_type         String?
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  scope              String?
  id_token           String? @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @db.Text @map("session_token") @unique
  accessToken  String?  @db.Text @map("access_token")
  expires      DateTime
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Footer {
  id        Int      @id @default(autoincrement())
  title     String @unique
  links     Link[]
}

model Link {
  id        Int      @id @default(autoincrement())
  link      Footer @relation(fields: [linkId], references: [id])
  linkId    Int
  title     String
  url       String
}

model JenisProduk {
  id        Int      @id @default(autoincrement())
  title     String @unique
  products  Produk[]
}

model Produk {
  id              Int      @id @default(autoincrement())
  jenisProduk     JenisProduk @relation(fields: [jenisProdukId], references: [id], onDelete: Cascade)
  jenisProdukId   Int
  title           String @unique
  items           ProdukItem[]
}

model ProdukItem {
  id              Int      @id @default(autoincrement())
  produk          Produk @relation(fields: [produkId], references: [id], onDelete: Cascade)
  produkId        Int
  prdcd           String @unique
  prd_name        String
  prd_category    String
  prd_type        String
  prd_bestseller  Boolean
  prd_desc        ProdukDesc[]
  prd_asset       String[]
  prd_thumbnail   String[]
}

model ProdukDesc {
  id              Int      @id @default(autoincrement())
  produkItem      ProdukItem @relation(fields: [produkitemId], references: [id], onDelete: Cascade)
  produkitemId    Int
  size1           String[]
  size2           String[]
  key_type        String
  variant         String
  superiority     String[]
  usecase         String[]
  note            String
  type            String[]
}